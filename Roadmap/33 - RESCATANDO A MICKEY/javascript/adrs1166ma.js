/*
EJERCICIO:
¬°Disney ha presentado un mont√≥n de novedades en su D23! 
Pero... ¬øD√≥nde est√° Mickey?
Mickey Mouse ha quedado atrapado en un laberinto m√°gico 
creado por Mal√©fica.
Desarrolla un programa para ayudarlo a escapar.
Requisitos:
1. El laberinto est√° formado por un cuadrado de 6x6 celdas.
2. Los valores de las celdas ser√°n:
   - ‚¨úÔ∏è Vac√≠o
   - ‚¨õÔ∏è Obst√°culo
   - üê≠ Mickey
   - üö™ Salida
Acciones:
1. Crea una matriz que represente el laberinto (no hace falta
que se genere de manera autom√°tica).
2. Interact√∫a con el usuario por consola para preguntarle hacia
donde se tiene que desplazar (arriba, abajo, izquierda o derecha).
3. Muestra la actualizaci√≥n del laberinto tras cada desplazamiento.
4. Valida todos los movimientos, teniendo en cuenta los l√≠mites
del laberinto y los obst√°culos. Notifica al usuario.
5. Finaliza el programa cuando Mickey llegue a la salida.
 */
// üî• SIMULADOR: ¬°Ayuda a Mickey a escapar del laberinto m√°gico! üî•

console.log("üé© ¬°Bienvenido al laberinto m√°gico de Mal√©fica! üé©")
console.log("üê≠ Mickey necesita tu ayuda para encontrar la salida (üö™).")

// 1. Crear el laberinto
const laberinto = [
    ["‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è"],
    ["‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è"],
    ["üê≠", "‚¨úÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨úÔ∏è"],
    ["‚¨õÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è"],
    ["‚¨úÔ∏è", "‚¨úÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "üö™", "‚¨õÔ∏è"],
    ["‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è", "‚¨õÔ∏è", "‚¨úÔ∏è"]
];

// Posici√≥n inicial de Mickey
let posicionMickey = { fila: 2, columna: 0 };

// Funci√≥n principal del programa
function iniciarLaberinto() {
    console.log("\n--- LABERINTO INICIAL ---");
    mostrarLaberinto();

    while (true) {
        const direccion = prompt("¬øHacia d√≥nde quieres mover a Mickey? (arriba/abajo/izquierda/derecha): ").toLowerCase();

        // Validar direcci√≥n
        if (!["arriba", "abajo", "izquierda", "derecha"].includes(direccion)) {
            console.log("‚ùå Direcci√≥n no v√°lida. Int√©ntalo de nuevo.");
            continue;
        }

        // Intentar mover a Mickey
        const nuevaPosicion = calcularNuevaPosicion(posicionMickey, direccion);
        if (!esMovimientoValido(nuevaPosicion)) {
            console.log("‚ùå Movimiento inv√°lido. Hay un obst√°culo o est√°s fuera del laberinto.");
            continue;
        }

        // Actualizar posici√≥n de Mickey
        laberinto[posicionMickey.fila][posicionMickey.columna] = "‚¨úÔ∏è"; // Limpiar la posici√≥n anterior
        posicionMickey = nuevaPosicion; // Actualizar posici√≥n
        laberinto[posicionMickey.fila][posicionMickey.columna] = "üê≠"; // Colocar a Mickey en la nueva posici√≥n

        // Mostrar el laberinto actualizado
        console.log(`\n--- MOVIMIENTO HACIA ${direccion.toUpperCase()} ---`);
        mostrarLaberinto();

        // Verificar si Mickey lleg√≥ a la salida
        if (laberinto[posicionMickey.fila][posicionMickey.columna] === "üö™") {
            console.log("üéâ ¬°Felicidades! Mickey ha encontrado la salida. üö™üê≠");
            break;
        }
    }
}

// Funci√≥n para mostrar el laberinto
function mostrarLaberinto() {
    laberinto.forEach(fila => console.log(fila.join(" ")));
}

// Funci√≥n para calcular la nueva posici√≥n
function calcularNuevaPosicion(posicionActual, direccion) {
    const nuevaPosicion = { ...posicionActual };
    switch (direccion) {
        case "arriba":
            nuevaPosicion.fila -= 1;
            break;
        case "abajo":
            nuevaPosicion.fila += 1;
            break;
        case "izquierda":
            nuevaPosicion.columna -= 1;
            break;
        case "derecha":
            nuevaPosicion.columna += 1;
            break;
    }
    return nuevaPosicion;
}

// Funci√≥n para validar el movimiento
function esMovimientoValido(posicion) {
    const { fila, columna } = posicion;

    // Verificar l√≠mites del laberinto
    if (fila < 0 || fila >= laberinto.length || columna < 0 || columna >= laberinto[0].length) {
        return false;
    }

    // Verificar obst√°culos
    if (laberinto[fila][columna] === "‚¨õÔ∏è") {
        return false;
    }

    return true;
}

iniciarLaberinto()