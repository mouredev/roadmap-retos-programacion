/* üî• EJERCICIO:
Explora el "Principio SOLID de Segregaci√≥n de Interfaces (Interface Segregation Principle, ISP)" 
y crea un ejemplo simple donde se muestre su funcionamiento de forma correcta e incorrecta.
*/

console.log("----- EJEMPLO SIMPLE -----");

//  * Ejemplo Incorrecto (viola ISP): Interfaz grande y forzada
// --------------------------------------------------------------------------------------------------------------
class TrabajadorIncorrecto {
    trabajar() {}
    comer() {}
    dormir() {}
}

class Robot extends TrabajadorIncorrecto {
    trabajar() {
        console.log("ü§ñ Robot trabajando...");
    }

    // M√©todos no necesarios, pero obligados por la interfaz
    comer() {
        throw new Error("‚ùå Los robots no comen.");
    }

    dormir() {
        throw new Error("‚ùå Los robots no duermen.");
    }
}

// Funci√≥n que usa la interfaz incorrecta
function gestionarTrabajador(trabajador) {
    trabajador.trabajar();
    try {
        trabajador.comer(); // ¬°Falla con Robot!
    } catch (error) {
        console.error(error.message);
    }
}

// Uso incorrecto
const robot = new Robot();
gestionarTrabajador(robot); // Error: Los robots no comen.


//  * Ejemplo Correcto (cumple ISP): Interfaces segregadas
// --------------------------------------------------------------------------------------------------------------
class Trabajable {
    trabajar() {
        throw new Error("Implementa el m√©todo 'trabajar'");
    }
}

class Comible {
    comer() {
        throw new Error("Implementa el m√©todo 'comer'");
    }
}

class Dormible {
    dormir() {
        throw new Error("Implementa el m√©todo 'dormir'");
    }
}

class RobotCorrecto extends Trabajable {
    trabajar() {
        console.log("ü§ñ Robot trabajando correctamente...");
    }
}

class Humano extends Trabajable {
    constructor() {
        super();
        this.comible = new Comible();
        this.dormible = new Dormible();
    }

    trabajar() {
        console.log("üë§ Humano trabajando...");
    }

    comer() {
        this.comible.comer();
    }

    dormir() {
        this.dormible.dormir();
    }
}

// Funci√≥n que cumple ISP
function gestionarTrabajo(trabajable) {
    trabajable.trabajar();
}

// Uso correcto
const robotCorrecto = new RobotCorrecto();
gestionarTrabajo(robotCorrecto); // Correcto: solo usa 'trabajar'

/* üî• DIFICULTAD EXTRA (opcional):
Crea un gestor de impresoras.
Requisitos:
1. Algunas impresoras s√≥lo imprimen en blanco y negro.
2. Otras s√≥lo a color.
3. Otras son multifunci√≥n, pueden imprimir, escanear y enviar fax.
Instrucciones:
1. Implementa el sistema, con los diferentes tipos de impresoras y funciones.
2. Aplica el ISP a la implementaci√≥n.
3. Desarrolla un c√≥digo que compruebe que se cumple el principio.
 */
// --------------------------------------------------------------------------------------------------------------
console.log("\n----- GESTOR DE IMPRESORAS (ISP) -----");

// Interfaz base para impresoras
class Impresora {
    imprimir() {
        throw new Error("M√©todo 'imprimir' no implementado");
    }
}

// Interfaz para esc√°ner
class Escaner {
    escanear() {
        throw new Error("M√©todo 'escanear' no implementado");
    }
}

// Interfaz para fax
class Fax {
    enviarFax() {
        throw new Error("M√©todo 'enviarFax' no implementado");
    }
}

// Impresora B/N (solo implementa impresi√≥n)
class ImpresoraBN extends Impresora {
    imprimir() {
        console.log("üñ®Ô∏è Imprimiendo en blanco y negro.");
    }
}

// Impresora color (solo implementa impresi√≥n)
class ImpresoraColor extends Impresora {
    imprimir() {
        console.log("üåà Imprimiendo a color.");
    }
}

// Multifunci√≥n (implementa todas las interfaces)
class Multifuncion extends Impresora {
    constructor() {
        super();
        this.escaner = new Escaner();
        this.fax = new Fax();
    }

    escanear() {
        this.escaner.escanear();
    }

    enviarFax() {
        this.fax.enviarFax();
    }

    imprimir() {
        console.log("üñ®Ô∏è üåà Imprimiendo en B/N o color (multifunci√≥n).");
    }
}

// Funciones del gestor que cumplen ISP
function imprimirDocumento(impresora) {
    if (impresora instanceof Impresora) {
        impresora.imprimir();
    } else {
        console.log("‚ö†Ô∏è No es una impresora v√°lida.");
    }
}

function escanearDocumento(escaner) {
    if (escaner instanceof Escaner) {
        escaner.escanear();
    } else {
        console.log("‚ö†Ô∏è No es un esc√°ner v√°lido.");
    }
}

function enviarFax(fax) {
    if (fax instanceof Fax) {
        fax.enviarFax();
    } else {
        console.log("‚ö†Ô∏è No es un fax v√°lido.");
    }
}

console.log("\n--- Pruebas de impresoras ---");
const impresoraBN = new ImpresoraBN();
const impresoraColor = new ImpresoraColor();
const multifuncion = new Multifuncion();

imprimirDocumento(impresoraBN); // Imprime B/N
imprimirDocumento(impresoraColor); // Imprime color
imprimirDocumento(multifuncion); // Imprime multifunci√≥n

escanearDocumento(multifuncion); // Escanea (multifunci√≥n)
escanearDocumento(impresoraBN); // Error: No es esc√°ner

enviarFax(multifuncion); // Envia fax (multifunci√≥n)
enviarFax(impresoraColor); // Error: No es fax