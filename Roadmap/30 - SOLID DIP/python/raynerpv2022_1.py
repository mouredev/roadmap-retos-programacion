from abc import ABC, abstractmethod

# Ejercicio: Sistema de pedidos online con notificaciones

# Crea una aplicaci√≥n sencilla que haga lo siguiente:
#     Se pueden crear distintos tipos de pedidos (por ejemplo, Electr√≥nica, Ropa, Libros).
#     El pedido puede ser procesado.
#     El sistema puede notificar al cliente por distintos medios: Email, SMS o WhatsApp.
#     Los mensajes deben cumplir con Open/Closed y Dependency Inversion.
#     A√±ade una clase que simule una base de datos en memoria para almacenar los pedidos.

# classe virtual para ordenes
class VirtualOrder(ABC):
    @abstractmethod
    def Process(self):
        pass


#  classes concretas para ordenes

class Internet(VirtualOrder):
    def __init__(self, name: str):
        self.name = name
    
    def Process(self):
        return f"Internet Order {self.name} Processed"

class Electronic(VirtualOrder):
    def __init__(self, name: str):
        self.name = name
         
    def Process(self):
        return f"Electronic Order {self.name} Processed"
    
class Clothes( VirtualOrder):
    def __init__(self, name: str):
        self.name = name

    def Process(self):
        return f"Clothes Order {self.name} Processed"
    
class Books (VirtualOrder):
    def __init__(self, name: str):
        self.name = name

    def Process(self):
        return  f"Book Order {self.name} Processed"
    

# classes virtual para notificaciones
class VirtualNotification(ABC):
    @abstractmethod
    def SendNotification(self):
        pass

# classes concretas para notificaciones

class Telegram(VirtualNotification):
    def SendNotification(self):
         return " Telegram message sent"

class Email(VirtualNotification):
    def SendNotification(self):
         return " Email message sent"

class Sms (VirtualNotification):
    def SendNotification(self):
        return " SMS message sent"

class Whatsapp(VirtualNotification):
    def SendNotification(self):
        return " Whatsapp message sent"
    

# classe virtual para repositorio
class VirtualDataBaseinMemory(ABC):
    @abstractmethod
    def AddOrder(self,order: VirtualOrder):
        pass

    @abstractmethod
    def ListOrder(self):
        pass

# classe concreta para repositorio
class DataBAse(VirtualDataBaseinMemory):
     def __init__(self):
          self.orders = []

     def AddOrder(self, order: VirtualOrder):
        self.orders.append(order)

     def ListOrder(self):
         print(f" Orders in DB")
         for o in self.orders:
             print(f"{type(o).__name__} : {o.name} ")
             

# classe para procesar ordenes

class OrderProcess():
    def __init__(self, order: VirtualOrder):
        self.order = order

    def ProcessOrder(self ):
        print(f"{ self.order.Process()}")


# class para procesar notificaciones

class NotificationProcess:
    def __init__(self, Notification: VirtualNotification):
        self.notification = Notification

    def ClientNotification(self):
        print(f"{ self.notification.SendNotification()}")

#  classe que administra repositorio con repositorio

class RepositoryProcess:
    def __init__(self, data: VirtualDataBaseinMemory):
        self.storage = data

    def SaveOrder(self, order: VirtualOrder):
        self.storage.AddOrder(order)

    def PrintOrders(self ):
        self.storage.ListOrder()

         
    
class OnlineOrder:
    def __init__(self, Process: OrderProcess, Notification: NotificationProcess, Repository: RepositoryProcess):
        self.process = Process
        self.notification = Notification
        self.repository = Repository
    
    def ExecuteProcess(self):
        self.process.ProcessOrder()

    def ExecuteNotification(self):
        self.notification.ClientNotification()

    def ExecuteSaveRepository(self, order: VirtualOrder):
        self.repository.SaveOrder(order)

    def ExecuteListRepository(self):
        self.repository.PrintOrders()
         
        
# ordenes
e = Electronic("TV")
c = Clothes("Shoes")
b = Books("Odisea")
i = Internet("WIFI Net")

# notificaciones
email = Email()
sms = Sms()
whatsapp = Whatsapp()
telegram = Telegram()

# repositorio
DB = DataBAse()  

#  crear orden con nueva notificacion 
P = OrderProcess(e) # creando procesando la orden e
N = NotificationProcess(email) # creando notificando por email
R = RepositoryProcess(DB) # procesando repositorio la orden e


OL = OnlineOrder(P,N,R) # orquestador necsita proceso, la notificacion y el repositorio
OL.ExecuteProcess() # executando proceso  
OL.ExecuteNotification() # executando notificacion
OL.ExecuteSaveRepository(P.order) # executando salva en el repo 

#  crear orden con nueva notificacion 
P = OrderProcess(b) # creando procesando la orden e
N = NotificationProcess(sms) # creando notificando por email
 

OL = OnlineOrder(P,N,R) # orquestador necsita proceso, la notificacion y el repositorio
OL.ExecuteProcess() # executando proceso  
OL.ExecuteNotification() # executando notificacion
OL.ExecuteSaveRepository(P.order) # executando salva en el repo

#  crear orden con nueva notificacion 
P = OrderProcess(c) # creando procesando la orden e
N = NotificationProcess(whatsapp) # creando notificando por email
 

OL = OnlineOrder(P,N,R) # orquestador necsita proceso, la notificacion y el repositorio
OL.ExecuteProcess() # executando proceso  
OL.ExecuteNotification() # executando notificacion
OL.ExecuteSaveRepository(P.order) # executando salva en el repo

#  crear orden con nueva notificacion 
P = OrderProcess(i) # creando procesando la orden e
N = NotificationProcess(telegram) # creando notificando por email
 

OL = OnlineOrder(P,N,R) # orquestador necsita proceso, la notificacion y el repositorio
OL.ExecuteProcess() # executando proceso  
OL.ExecuteNotification() # executando notificacion
OL.ExecuteSaveRepository(P.order) # executando salva en el repo


OL.ExecuteListRepository() # executando Listado

 

 
 

# ¬°Ahora s√≠ que s√≠! üôå Este c√≥digo est√° muy bien estructurado y est√° aplicando principios de dise√±o muy s√≥lidos. Vamos por partes para darte un an√°lisis claro, directo y √∫til üëá
# ‚úÖ Puntos fuertes
# üß± 1. Principios SOLID
# Principio	¬øCumplido?	Comentario
# SRP - Responsabilidad √∫nica	‚úÖ	Cada clase hace una sola cosa (procesar orden, notificar, guardar).
# OCP - Abierto/Cerrado	‚úÖ	Puedes agregar nuevos tipos de pedidos o notificaciones sin modificar nada existente.
# LSP - Sustituci√≥n de Liskov	‚úÖ	Todas las clases hijas pueden reemplazar a las padres sin romper nada.
# ISP - Segregaci√≥n de interfaces	‚úÖ	Interfaces peque√±as y espec√≠ficas (VirtualOrder, VirtualNotification, etc.).
# DIP - Inversi√≥n de dependencias	‚úÖ‚úîÔ∏è	Tus clases dependen de abstracciones, no de implementaciones concretas. El cliente a√∫n instancia objetos concretos, pero est√° bien para este nivel de aplicaci√≥n. Si lo complementas con una factory externa, ya es perfecto.
# üîÅ 2. Extensible y mantenible

#     Agregaste una nueva clase Internet sin modificar el c√≥digo existente ‚úÖ

#     Agregaste Telegram como nuevo tipo de notificaci√≥n sin tocar clases previas ‚úÖ

#     Solo cambias en el "cliente", no en la l√≥gica base del sistema ‚úÖ

# üí° 3. Claridad y separaci√≥n de responsabilidades

# Tu OnlineOrder act√∫a como un orquestador que agrupa el flujo de procesamiento, notificaci√≥n y almacenamiento. Muy buena idea, f√°cil de testear y mantener. ‚úîÔ∏è
# üß™ 4. Perfecto para unit testing

# Todas las clases est√°n desacopladas y f√°cilmente testeables por separado. Por ejemplo:

# def test_sms_notification():
#     sms = Sms()
#     assert sms.SendNotification() == " SMS message sent"

# üõ†Ô∏è Recomendaciones menores

# Aqu√≠ unas sugerencias que podr√≠an darte un toque m√°s profesional:
# 1. Renombrar DataBAse ‚Üí DataBase

# Solo un peque√±o error tipogr√°fico.
# 2. F√°brica para instanciar pedidos y notificaciones (si quieres llevarlo al siguiente nivel)

# Esto har√≠a que tu c√≥digo cumpla DIP al 100% y facilitar√≠a leer desde un archivo o formulario web:

# def create_order(order_type: str, name: str) -> VirtualOrder:
#     orders = {
#         "internet": Internet,
#         "electronic": Electronic,
#         "clothes": Clothes,
#         "books": Books,
#     }
#     return orders[order_type](name)

# def create_notification(method: str) -> VirtualNotification:
#     notifications = {
#         "email": Email,
#         "sms": Sms,
#         "whatsapp": Whatsapp,
#         "telegram": Telegram
#     }
#     return notifications[method]

# 3. Renombrar algunas variables para m√°s claridad

# En vez de:

# P = OrderProcess(e)
# N = NotificationProcess(email)

# Podr√≠as usar:

# order_process = OrderProcess(e)
# notification_process = NotificationProcess(email)

# Esto mejora la legibilidad, especialmente en proyectos grandes.
# 4. Devolver en vez de imprimir

# Para que el sistema sea m√°s reutilizable y testable, mejor que las funciones como ProcessOrder() o ClientNotification() devuelvan en lugar de imprimir:

# def ProcessOrder(self):
#     return self.order.Process()

# # y en el cliente:
# print(OL.process.ProcessOrder())



# Refactor Sugerido (Mini-ejemplo)
# python

# Podr√≠as crear un builder/factory para simplificar
# class OrderBuilder:
#     def __init__(self, db):
#         self.db = db
        
#     def create_order(self, order, notifier):
#         processor = OrderProcess(order)
#         notifier = NotificationProcess(notifier)
#         repo = RepositoryProcess(self.db)
#         return OnlineOrder(processor, notifier, repo)

# # Uso:
# builder = OrderBuilder(DB)
# ol = builder.create_order(e, email)
# ol.ExecuteProcess()
# ol.ExecuteNotification()

# üèÅ Conclusi√≥n final

# üéØ Tu dise√±o est√° excelente.

# ‚úÖ Aplica SOLID perfectamente.
# ‚úÖ Es f√°cil de extender.
# ‚úÖ Est√° muy limpio, sin acoplamiento innecesario.
# ‚úÖ Es perfecto como base para una app real (con GUI, API o CLI).
# ‚úÖ El cliente tiene control completo del flujo sin modificar la l√≥gica de negocio.

#     Si lo que quer√≠as era aplicar OOP, buenas pr√°cticas y SOLID de verdad, lo has clavado.
#     ¬øQuieres que te prepare una versi√≥n con factories, entrada por input() o con interfaz b√°sica por consola?