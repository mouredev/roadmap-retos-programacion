"""
ESTRUCTURAS DE DATOS

 * EJERCICIO:
 * - Muestra ejemplos de creaci√≥n de todas las estructuras soportadas por defecto en tu lenguaje.
 * - Utiliza operaciones de inserci√≥n, borrado, actualizaci√≥n y ordenaci√≥n.
"""

"""
LISTAS
"""
print("\n")
print("LISTAS")
#Deben contener el mismo tipo de dato
my_integer_list = [1,4,18,23,89,55,73,18]
my_string_list = ["Alex","Valderrama","Cenalmor","Sole","Gonz√°lez"]

#B√∫squeda
print("B√∫squeda")
print(f"Con la funci√≥n index() podemos buscar un elemento en la lista y obetener su posici√≥n. \"Valderrama\" por ejemplo se encuentra en la posici√≥n {my_string_list.index("Valderrama")} de my_string_list")
print(f"Tambi√©n con count() podemos buscar las ocurrencias de un elemento dentro de la lista, por ejemplo el 18 en my_integer_list aparece: {my_integer_list.count(18)} veces")

#Inserci√≥n
print("\n")
print("Inserci√≥n")
my_integer_list.insert(3,33)
print(f"Mediante .insert(), se \"inserta\" un 33 en la posici√≥n 3 de my_integer_list: {my_integer_list}")
my_string_list.append("Velasco")
print(f"Tambi√©n se puede a√±adir un nuevo elemento al final con append(), por ejemplo, la cadena \"Velasco\" al final de my_string_list: {my_string_list}")
my_other_integer_list = [2,62,47]
my_integer_list.extend(my_other_integer_list)
print(f"Podemos a√±adir a la lista my_integer_list una nueva lista my_other_integer_list {my_other_integer_list} con el m√©todo extend(): {my_integer_list}")

#Actualizaci√≥n
print("\n")
print("Actualizaci√≥n")
my_integer_list[3] = 99
print(f"Podemos actualizar un elemento de la lista mediante su √≠ndice, por ejemplo inclimos el \"99\" en la posici√≥n 3 de my_integer_list: {my_integer_list}")

#Ordenaci√≥n
print("\n")
print("Ordenaci√≥n")
my_integer_list.sort()
my_string_list.sort()
print(f"Las listas son estructuras iterables que se pueden ordenar con la funci√≥n sort(). my_integer_list quedar√≠a ordenada as√≠: {my_integer_list}")
print(f"Y my_string_list quedar√≠a asi: {my_string_list}")


#Borrado
print("\n")
print("Borrado")
erased_integer = my_integer_list.pop()
erased_string = my_string_list.pop()
print(f"Podemos usar el m√©todo pop() para quitar el √∫ltimo elemento de la lista y guardarlo, por ejemplo ejecut√°ndolo en my_integer_list, quitamos {erased_integer} y la lista queda {my_integer_list}")
print(f"Igual para my_string_list, con pop() quito {erased_string} y la lista queda: {my_string_list}")
erased_string = my_string_list.pop(1)
print(f"O podemos indicar el √≠ndice del elemento a desapilar, por ejemplo ejecutando my_string_list.pop(1), quito \"{erased_string}\" y la lista queda {my_string_list}")
my_integer_list.remove(18)
print(f"Con remove() puedo elimitar un item concreto, por ehjemplo, borro un \"18\" de my_integer_list: {my_integer_list}")
my_string_list.clear()
print(f"Tambi√©n podemos borrar el contenido de la lista con clear(), si lo ejecuto en my_string_list: {my_string_list} queda una lista vac√≠a")

"""
TUPLAS
"""
#Al ser estructuras inmutables no se pueden realizar operaciones de actualizaci√≥n, borrado o inserci√≥n. Tampoco de ordenaci√≥n.
#Podr√≠amos modificar la tupla pas√°ndola a una lista y usar las operaciones anteriores
print("\n")
print("TUPLAS")
print("B√∫squeda")
my_tuple = (38, 1.82,"Alex","Valderrama")

print(f"No existe una funci√≥n de b√∫squeda como tal, aunque podemos obtener el √≠ndice de un elemento de la tupla con index(), por ejemplo \"Valderrama\" est√° en el √≠ndice {my_tuple.index("Valderrama")}")
print(f"O con count() podemos ver las ocurrencias de un elemento de la tupla, por ejemplo el n√∫mero 38 aparece {my_tuple.count(38)}")
print(f"Y podemos acceder a sus elementos con el √≠ncide, como en las l√≠stas, por tanto my_tuple[2] = {my_tuple[2]}")

"""
SETS
"""
print("\n")
print("SETS")

my_set = {38, 1.82,"Alex","Valderrama"}
#Al ser estrucuras no ordenadas, no se pueden acceder a los elementos u ordenar

#B√∫squeda: no hay un m√©todo como tal, se tiene que hacer con operadores de pertenencia como "in"
print("\n")
print("B√∫squeda")
print(f"Para saber si un elemento est√° en el set usamos por ejemplo \"Alex\" in my_set y devuelve un boolean: {"Valderrama" in my_set}")

#Inserci√≥n
print("\n")
print("Inserci√≥n")
my_set.add("avcenal")
print(f"Con el m√©todo add(), podemos a√±adir un elemento adicional, en este caso my_set.add(\"avcenal\"): {my_set}")
my_set.add("avcenal")
print(f"Si a√±adimos un item existente, no se va a repetir: my_set.add(\"avcenal\") --> {my_set}")

#Actualizaci√≥n
print("\n")
print("Actualizaci√≥n")
my_iterable = [20,75,90]
my_set.update(my_iterable)
print(f"Con el m√©todo update() podemos actualizar el set con un iterable como my_iterable, quedando: {my_set}")
my_other_set = {"Cenalmor", "Growth Specialist"}
my_union_set = my_set.union(my_other_set)
print(f"Tambi√©n se pueden usar m√©todos como union() para unir dos sets asig√°ndo la uni√≥n a una variable nueva: {my_union_set}")
my_dif_set = my_union_set.difference(my_set)
print(f"O el m√©todo diferencia, que nos devuelve solo los valores diferentes entre my_union_set y my_set: {my_dif_set}")

#Borrado
print("\n")
print("Borrado")
my_erased_element = my_set.pop()
print(f"Como en las listas, podemos usar pop() para desapilar el √∫ltimo elemento de esa ejecuci√≥n: Desapilamos {my_erased_element} y el set queda: {my_set}")
my_set.clear()
print(f"Y el borrado lo hacemos con el m√©todo clear() que borra los elementos del set {my_set}")

"""
DICCIONARIOS
"""
#Como son estructuras no ordenadas, no tienen m√©todos de ordenaci√≥n
my_dict = {
    "Nombre":"Alex",
    "Apellido":"Valderrama",
    "Edad":38,
    "Lenguajes":{"Python","Swift","Javascript"},
    "medida":1.82
}
#B√∫squeda:
print("\n")
print("B√∫squeda")
print(f"Para la b√∫squeda dentro de un diccionario podemos usar los operadores de pertenencia y devuelbe un boolean: \"Valderrama\" in my_dict.values() = {"Valderrama" in my_dict.values()}")
print(f"En cambio si no usamos .values() busca dentro de las propiedades: \"Valderrama\" in my_dict() = {"Valderrama" in my_dict}; \"Apellido\" in my_dict = {"Apellido" in my_dict}")
print(f"Tambi√©n si sabemos la clave, podemos acceder directamente al valor con my_dict.get(\"Nombre\"): {my_dict.get("Nombre")} o directamente usando algo del tipo my_dict[\"Nombre\"]: {my_dict["Nombre"]}")

#Inserci√≥n
print("\n")
print("Inserci√≥n")
my_dict["Nick"] = "avcenal"
print(f"Se puede insertar un nuevo par clave:valor simplemente con my_dict[\"nueva_clave\"]=\"nuevo_valor\": {my_dict}")

#Actualizaci√≥n
print("\n")
print("Actualizaci√≥n")
my_dict["Nombre"] = "Alejandro"
print(f"Podemos actualizar el valor de un key directamente con my_dict[key] = value: {my_dict}")

#Borrado
print("\n")
print("Borrado")
erased_element = my_dict.pop("medida")
print(f"Podemos usar el m√©todo pop() y al pasarle una de las keys como argumento, el valor se desapila, lo podemos guardar en una variable y la clave se elimina del diccionario {erased_element}")
print(my_dict)
erased_item = my_dict.popitem()
print(f"Tambien podemos usar el m√©todo .popitem() que hace lo mismo que pop(), pero en este caso si desapila el √∫ltimo valor del diccionario y elimina la clave, pudiendo guardar el valor en una variable {erased_item}")
del my_dict["Edad"]
print(f"Igualmente podemos usar del para borrar un par clave:valor sin almacenarlo en ning√∫n sitio {my_dict}")


"""
 * DIFICULTAD EXTRA (opcional):
 * Crea una agenda de contactos por terminal.
 * - Debes implementar funcionalidades de b√∫squeda, inserci√≥n, actualizaci√≥n
 *   y eliminaci√≥n de contactos.
 * - Cada contacto debe tener un nombre y un n√∫mero de tel√©fono.
 * - El programa solicita en primer lugar cu√°l es la operaci√≥n que se quiere realizar,
 *   y a continuaci√≥n los datos necesarios para llevarla a cabo.
 * - El programa no puede dejar introducir n√∫meros de tel√©fono no n√∫mericos y con m√°s
 *   de 11 d√≠gitos (o el n√∫mero de d√≠gitos que quieras).
 * - Tambi√©n se debe proponer una operaci√≥n de finalizaci√≥n del programa.
"""
import time,re

def insert_contact(one_dict): #pasar por par√°metro name y phone, evaluar su longitud y si es distinto de 0, preguntar que confirme el dato y no preguntarlo
    phone_pattern = r"^\+34[6|7|8]{1}[0-9]{8}"
    name = input("Dime el nombre del contacto: ")
    match = None
    while match == None:
        phone = input("Ahora dime el tel√©fono del contacto: ")
        match = re.search(phone_pattern,phone)
        if match == None:
            print("Parece que el formato de tu n√∫mero de tel√©fono no es v√°lido. Trata de usar el formato +34123456789 por favor")
            time.sleep(2)

    one_dict[name] = phone
    print("El contacto ha sido guardado en la agenda üëç")
    time.sleep(2)
    print("\n")
    return one_dict

def update_contact_after_find(one_dict,name):
    option = ""
    phone_pattern = r"^\+34[6|7|8]{1}[0-9]{8}"
    match = None
    while option!="N" or option!="T":
        option = input("¬øQu√© quieres actualizar, el nombre o el tel√©fono?(N/T)")
        option = option.upper()
        if option == "N":
            new_name = input("Ok, dime el nombre: ")
            phone = one_dict[name]
            del one_dict[name]
            one_dict[new_name]=phone
            return one_dict,new_name
        elif option == "T":
            while match == None:
                new_phone = input ("Ok dime el n√∫mero de tel√©fono: ")
                match = re.search(phone_pattern,new_phone)
                if match == None:
                    print("Parece que el formato de tu n√∫mero de tel√©fono no es v√°lido. Trata de usar el formato +34123456789 por favor")
                    time.sleep(2)
            one_dict[name] = new_phone
            return one_dict,name
        else:
            print("La opci√≥n no es v√°lida, prueba de nuevo")
    
def erase_contact(one_dict,data):
    if data.startswith("+"):
        name_list = list(one_dict.keys())
        phone_list = list(one_dict.values())
        if data in phone_list:
            index = phone_list.index(data)
            del one_dict[name_list[index]]
            print("El contacto ha quedado borrado de la Agenda")
        #else:
         #   print("No existe un contacto con ese n√∫mero de tel√©fono dentro de la Agenda")
    else:
        try:
            del one_dict[data]
            print("El contacto ha quedado borrado de la Agenda")
        except KeyError:
            print("No existe un contacto con ese n√∫mero de tel√©fono dentro de la Agenda")
    return one_dict

        
def find_contact(one_dict,mode):
    option = ""
    insert_option = ""
    update_option = ""
    phone_pattern = r"^\+34[6|7|8]{1}[0-9]{8}$"
    while option!="N" or option!="T":
        option = input("¬øQuieres buscar por nombre o por tel√©fono?(N/T)")
        option = option.upper()
        if option == "N":
            try:
                name = input("Perfecto, dime el nombre por favor: ")
                print(f"He encontrado a {name} en la agenda. Su tel√©fono es {one_dict[name]}")
                time.sleep(1)
                print("\n")
            except KeyError:
                print("Parece que el contacto que buscas no est√° en la agenda")
                time.sleep(1)
                print("\n")
                while insert_option!="Y" or insert_option!="N":
                    insert_option = input("¬øQuieres incluirlo?(Y/N)")
                    insert_option = insert_option.upper()                             
                    if insert_option == "Y":
                        print("Ok")
                        insert_contact(one_dict)
                        break
                    elif insert_option == "N":
                        print("Entendido")
                        time.sleep(1)
                        print("\n")
                        break
                    else:
                        print("La opci√≥n no es v√°lida, prueba de nuevo")
                        time.sleep(1)
                        print("\n")
                        
            else:
                if mode == "find":
                    update_option = ""
                    while (update_option!="Y" or update_option!="N"):
                        update_option = input("¬øQuieres actualizar el contacto?(Y/N)")
                        update_option = update_option.upper()
                        if update_option == "Y":
                            one_dict,name = update_contact_after_find(one_dict,name)
                            print(f"El nombre del contacto ahora es {name} y el tel√©fono es {one_dict[name]}")
                            time.sleep(2)
                            print("\n")
                            break
                        elif update_option == "N":
                            print("Entendido")
                            time.sleep(1)
                            print("\n")
                            break
                        else:
                            print("La opci√≥n no es v√°lida, prueba de nuevo")
                            time.sleep(1)
                            print("\n")
                            
                elif mode == "update":
                    one_dict,name = update_contact_after_find(one_dict,name)
                    print(f"El nombre del contacto es ahora {name} y el tel√©fono es {one_dict[name]}")
                    time.sleep(2)
                    print("\n")
                    break
                elif mode == "erase":
                    erase_contact(one_dict,name)
                    time.sleep(2)
                    print("\n")
                    break
        
        elif option =="T":
                update_option = ""
                match = None
                while match == None:
                    phone = input("Perfecto, dime el tel√©fono por favor: ")
                    match = re.search(phone_pattern,phone)
                    if match == None:
                        print("Parece que el formato de tu n√∫mero de tel√©fono no es v√°lido. Trata de usar el formato +34123456789 por favor")
                        time.sleep(2)
                if phone in one_dict.values():
                    print("¬°¬°Lo encontr√©!!")
                    phone_list = list(one_dict.values())
                    name_list = list(one_dict.keys())
                    index = phone_list.index(phone)
                    time.sleep(2)
                    if mode == "find":
                        print(f"El nombre del contacto es {name_list[index]} y el tel√©fono es {phone}")
                        while update_option != "Y" or update_option!="N":
                            update_option = input("¬øQuieres actualizar el contacto?(Y/N)")
                            update_option = update_option.upper()
                            if update_option == "Y":
                                one_dict,name = update_contact_after_find(one_dict,name_list[index])
                                print(f"El nombre del contacto ahora es {name} y el tel√©fono es {one_dict[name]}")
                                print("\n")
                                time.sleep(2)
                                break
                            elif update_option == "N":
                                print("Entendido")
                                time.sleep(1)
                                print("\n")
                                break
                            else:
                                print("La opci√≥n no es v√°lida, prueba de nuevo")
                                time.sleep(1)
                                print("\n")
                    elif mode == "update":
                        one_dict,name = update_contact_after_find(one_dict,name_list[index])
                        print(f"El nombre del contacto ahora es {name} y el tel√©fono es {one_dict[name]}")
                        print("\n")
                        time.sleep(2)
                        break    
                    elif mode == "erase":
                        erase_contact(one_dict,phone)
                        time.sleep(2)
                        print("\n")
                        break

                else:
                    print("Parece que el contacto que buscas no est√° en la agenda")
                    insert_option = ""
                    while insert_option!="Y" or insert_option!="N":
                        insert_option = input("¬øQuieres incluirlo?(Y/N)")
                        insert_option = insert_option.upper()
                        if insert_option == "Y":
                            print("Ok")
                            insert_contact(one_dict)
                            break
                        elif insert_option == "N":
                            print("Entendido")
                            time.sleep(1)
                            print("\n")
                            break
                        else:
                            print("La opci√≥n no es v√°lida, prueba de nuevo")
                            time.sleep(1)
                            print("\n")
        else:
            print("La opci√≥n no es v√°lida, prueba de nuevo")
            time.sleep(1)
            print("\n")

        return(one_dict)

my_agenda = dict()
option = ""
print("\n")
print("---------------------------------------------------")
print("BIENVENIDO/A AL SISTEMA DE AGENDA DE AVCENAL.DEV")
while option != "F":
    print("---------------------------------------------------")
    option= input("¬øQue es lo que quieres hacer?ü§î\n- Buscar contacto(B)üëÄ\n- Insertar contacto(I)‚¨áÔ∏è\n- Actualizar contacto(A)üîÑ\n- Eliminar contacto(E)‚ùå\n- Finalizar(F)‚è©Ô∏è\n\n---> Introduce tu Opci√≥n: ")
    option = option.upper()
    if option == "B":
        find_contact(my_agenda,"find")
    elif option == "I":
        insert_contact(my_agenda)
    elif option =="A":
        find_contact(my_agenda,"update")
    elif option == "E":
        find_contact(my_agenda,"erase")

print("Gracias por usar el sistema de Agenda de AVCENAL.DEV. Un saludo")
print("\n")
