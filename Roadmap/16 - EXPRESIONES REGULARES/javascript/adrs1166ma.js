/* ðŸ”¥ EJERCICIO:
Utilizando tu lenguaje, explora el concepto de expresiones regulares,
creando una que sea capaz de encontrar y extraer todos los nÃºmeros
de un texto.
*/
const texto = "El precio es de 123 euros, pero con un descuento del 15%. AdemÃ¡s, hay 4 productos disponibles.";

// ExpresiÃ³n regular para encontrar nÃºmeros
const regexNumeros = /\d+/g;

// Extraer nÃºmeros del texto
const numeros = texto.match(regexNumeros);

console.log("NÃºmeros encontrados:", numeros);
// NÃºmeros encontrados:  (3) ['123', '15', '4']

/*
Dictionary ðŸ“— [ /\d+/g ] = {
    \d: Coincide con cualquier dÃ­gito (0-9).
    +: Indica que debe coincidir con uno o mÃ¡s dÃ­gitos consecutivos.
    g: Modificador global que busca todas las coincidencias en el texto (no solo la primera).
}
*/
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

/* ðŸ”¥ DIFICULTAD EXTRA (opcional):
Crea 3 expresiones regulares (a tu criterio) capaces de:
- Validar un email.
- Validar un nÃºmero de telÃ©fono.
- Validar una url.
*/

function validarEmail(email) {
    const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regexEmail.test(email);
}

function validarTelefono(telefono) {
    const regexTelefono = /^\+?\d{1,3}?[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}$/;
    return regexTelefono.test(telefono);
}

function validarURL(url) {
    const regexURL = /^(https?:\/\/)?([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})(\/.*)?$/;
    return regexURL.test(url);
}

console.log("Â¿Es vÃ¡lido el email 'usuario@example.com'?", validarEmail("usuario@example.com"))
console.log("Â¿Es vÃ¡lido el email 'usuario@.com'?", validarEmail("usuario@.com"))
// Â¿Es vÃ¡lido el email 'usuario@example.com'? true
// Â¿Es vÃ¡lido el email 'usuario@.com'? false

console.log("Â¿Es vÃ¡lido el telÃ©fono '+51-999-999-999'?", validarTelefono("+51-999-999-999"))
console.log("Â¿Es vÃ¡lido el telÃ©fono '123'?", validarTelefono("123"))
// Â¿Es vÃ¡lido el telÃ©fono '+51-999-999-999'? true
// Â¿Es vÃ¡lido el telÃ©fono '123'? false

console.log("Â¿Es vÃ¡lida la URL 'https://www.example.com'?", validarURL("https://www.example.com"))
console.log("Â¿Es vÃ¡lida la URL 'www.example'?", validarURL("www.example"))
// Â¿Es vÃ¡lida la URL 'https://www.example.com'? true
// Â¿Es vÃ¡lida la URL 'www.example'? true


/*
Dictionary ðŸ“— [ expresiones regulares ] = {
    regexEmail : {
        ^[a-zA-Z0-9._%+-]+: Parte local del email (antes del @), permite letras, nÃºmeros y caracteres especiales como ., _, %, +, -.
        @[a-zA-Z0-9.-]+: Dominio del email, permite letras, nÃºmeros, puntos (.) y guiones (-).
        \.[a-zA-Z]{2,}$: ExtensiÃ³n del dominio (ejemplo: .com, .es), debe tener al menos 2 caracteres.
    }
    regexTelefono : {
        ^\+?: Opcionalmente comienza con un + (indicador de paÃ­s).
        \d{1,3}?: CÃ³digo de paÃ­s (1 a 3 dÃ­gitos).
        [-.\s]?: Separadores opcionales (-, ., espacio).
        \(?\d{1,4}\)?: CÃ³digo de Ã¡rea opcionalmente entre parÃ©ntesis.
        \d{1,4}[-.\s]?\d{1,4}[-.\s]?\d{1,9}$: NÃºmero principal, separado en partes.
    }
    regexURL : {
        ^(https?:\/\/)?: Protocolo opcional (http:// o https://).
        [a-zA-Z0-9.-]+\.[a-zA-Z]{2,}: Dominio y extensiÃ³n (ejemplo: example.com).
        (\/.*)?$: Ruta opcional despuÃ©s del dominio.
    }
}
*/