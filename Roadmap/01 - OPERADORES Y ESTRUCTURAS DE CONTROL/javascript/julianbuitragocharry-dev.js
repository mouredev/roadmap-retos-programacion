//‚úîÔ∏èOPERADORES
//‚úîÔ∏èOPERADORES ARITMETICOS
let a = 5;

//1Ô∏è‚É£=============================== PRE INCREMENTO
let preIncremento = ++a;
console.log(preIncremento); // 6
console.log(a); // 6

//2Ô∏è‚É£=============================== POST INCREMENTO
let postIncremento = a++;
console.log(postIncremento); // 6
console.log(a); // 7

//3Ô∏è‚É£=============================== PRE DECREMENTO                              
let preDecremento = --a;
console.log(preDecremento); // 6
console.log(a); // 6

//4Ô∏è‚É£=============================== POST DECREMENTO
let postDecremento = a--;
console.log(postDecremento); // 6
console.log(a); // 5

//‚úîÔ∏èOPERADORES DE ASIGNACI√ìN
let x = 7;
let y = 12; 

//1Ô∏è‚É£=============================== ASIGNACI√ìN B√ÅSICA
x = y;
console.log(x); // 12

//2Ô∏è‚É£=============================== ASIGNACI√ìN DE ADICI√ìN
x += y; //x = x + y
console.log(x); // 24 

//3Ô∏è‚É£=============================== ASIGNACI√ìN DE RESTA
x -= y; //x = x - y
console.log(x); // 12

//4Ô∏è‚É£=============================== ASIGNACI√ìN DE MULTIPLICACI√ìN
x *= y; //x = x * y
console.log(x); // 144

//5Ô∏è‚É£=============================== ASIGNACI√ìN DE DIVISI√ìN
x /= y; //x = x / y
console.log(x); // 12

//6Ô∏è‚É£=============================== ASIGNACI√ìN DE RESIDUO
x %= y; //x = x % y
console.log(x); // 0

//7Ô∏è‚É£=============================== ASIGNACI√ìN DE EXPONENTE
x = 2;
y = 3;
x **= y; //x = x ** y;
console.log(x); // 8

//8Ô∏è‚É£=============================== ASIGNACI√ìN DE DESPLAZAMIENTO A LA IZQUIERDA
x <<= y; //x = x << y
console.log(x); // 64 

//9Ô∏è‚É£=============================== ASIGNACI√ìN DE DESPLAZAMIENTO A LA DERECHA
x >>= y; //x = x >> y
console.log(x); // 8 

//üîü=============================== ASIGNACI√ìN DE DESPLAZAMIENTO A LA DERECHA SIN SIGNO
x >>>= y; //x = x >>> y
console.log(x); // 1 

//1Ô∏è‚É£1Ô∏è‚É£=============================== ASIGNACI√ìN AND BIT A BIT
x &= y; //x = x & y
console.log(x); // 1

//1Ô∏è‚É£2Ô∏è‚É£=============================== ASIGNACI√ìN XOR BIT A BIT
x ^= y; //x = x ^ y
console.log(x); // 2

//1Ô∏è‚É£3Ô∏è‚É£=============================== ASIGNACI√ìN OR BIT A BIT
x |= y; //x = x | y
console.log(x); // 3

//1Ô∏è‚É£4Ô∏è‚É£=============================== ASIGNACI√ìN AND L√ìGICO
let z = null;
x &&= z; //x = x && z
console.log(x); // null (La asignaci√≥n no se realiza porque la condici√≥n es falsa)

//1Ô∏è‚É£5Ô∏è‚É£=============================== ASIGNACI√ìN OR L√ìGICO
let w = "Valor";
x ||= w; //x = x || w
console.log(x); // Valor (La asignaci√≥n se realiza porque la condici√≥n es falsa)

//1Ô∏è‚É£6Ô∏è‚É£=============================== ASIGNACI√ìN DE ANULACI√ìN
let u;
x ??= u; // Equivalente a: x = x ?? u
console.log(x); // Valor (La asignaci√≥n se realiza porque x es null o undefined)


//‚úîÔ∏èOPERADORES DE COMPARACI√ìN

//1Ô∏è‚É£=============================== IGUAL
console.log(6 == '6'); // true
console.log(2 == '3'); // false

//2Ô∏è‚É£=============================== NO ES IGUAL 
console.log(6 != '2'); // true
console.log(2 != '2'); // false

//3Ô∏è‚É£=============================== ESTRICTAMENTE IGUAL
console.log(6 == '6'); // true
console.log(2 == '3'); // false

//4Ô∏è‚É£=============================== DESIGUALDAD ESTRICTA 
console.log(6 != '2'); // true
console.log(2 != '2'); // false

//5Ô∏è‚É£=============================== MAYOR QUE
console.log(6 > 3); // true
console.log(3 > 6); // false

//6Ô∏è‚É£=============================== MAYOR O IGUAL QUE
console.log(4 >= 4); // true
console.log(7 >= 0); // false

//7Ô∏è‚É£=============================== MENOR QUE
console.log(2 <= 10); // true
console.log(10 <= 2); // false

//8Ô∏è‚É£=============================== MENOR O IGUAL QUE
console.log(8 <= 8); // true
console.log(7 <= 2); // false


//‚úîÔ∏èOPERADORES LOGICOS
//Son utilizados para obtener booleanos, son equivalentes a las tablas de verdad.

//1Ô∏è‚É£=============================== AND LOGICO
console.log (true && true); // true
console.log (false && true); // false
console.log (true && false); // false
console.log (false && false); // false

//2Ô∏è‚É£=============================== OR LOGICO
console.log (true || true); // true
console.log (false || true); // true
console.log (true || false); // true
console.log (false || false); // false

//3Ô∏è‚É£=============================== NOT LOGICO
console.log(!false); // true
console.log(!true); // false

//‚úîÔ∏èOPERADOR TERNIARIO
// Se evalua como una condicion equivalente a un if {} else {}.
const age = 18;
var status = age >= 18 ? "adult" : "minor";
console.log(`Operador Terniario ?: ${status}`); // adult

//‚úîÔ∏èOPERADOR UNITARIO DELETE
//Elimina propiedades de objetos.

let persona = {nombre: "Juan", edad: 30, ciudad: "Argentina"};
console.log(`Objeto original: ${persona}`); // { nombre : 'Juan', edad: 30 , ciudad : 'Argentina' }

//=============================== Eliminando la propiedad 'ciudad' del objeto
let deleteSuccess = delete persona.ciudad;
console.log(`Despu√©s de eliminar 'ciudad': ${persona}`); // { nombre : 'Juan', edad: 30 }
console.log(`Operaci√≥n 'delete' exitosa: ${deleteSuccess}`); // true

//‚úîÔ∏èOPERADOR DE RELACI√ìN IN
// Verificando si 'nombre' y 'apellido' son propiedades del objeto 'persona'
console.log("¬ø'nombre' en persona?", "nombre" in persona); // true
console.log("¬ø'apellido' en persona?", "apellido" in persona); // false


//‚úîÔ∏èESTRUCTURAS DE CONTROL
//‚úîÔ∏èWHILE
let contadorWhile = 0;
while (contadorWhile < 5) {
    console.log(`Iteraci√≥n: ${contadorWhile}`);
    contadorWhile++;
}

//‚úîÔ∏èDO WHILE
let contadorDoWhile = 0;

do {
    console.log(`Iteraci√≥n: ${contadorDoWhile}`);
    contadorDoWhile++;
} while (contadorDoWhile < 5);

//‚úîÔ∏èFOR
for (let i = 0; i < 5; i++) {
    console.log(`Iteraci√≥n: ${i}`);
}

//‚úîÔ∏èFOR OF
let arrayForOf = [10, 20, 30];

for (let valor of arrayForOf) {
    console.log(`Valor elemento arrayForOf: ${valor}`);
}

//‚úîÔ∏èFOR IN
let objetoForIn = { a: 1, b: 2, c: 3 };

for (let propiedad in objetoForIn) {
    console.log(`Propiedad ${propiedad} = ${objetoForIn[propiedad]}`);
}

//‚úîÔ∏èFOR EACH
let arrayForEach = [1, 2, 3];

arrayForEach.forEach(function (elemento) {
    console.log(`Elemento: ${elemento}`);
});

//‚úîÔ∏èSWITCH
let opcion = 2;

switch (opcion) {
    case 1:
        console.log("Opci√≥n 1");
        break;
    case 2:
        console.log("Opci√≥n 2");
        break;
    default:
        console.log("Opci√≥n por defecto");
}


//‚úîÔ∏èIF ELSE
let numero = 7;

if (numero > 0) {
    console.log("N√∫mero positivo");
} else if (numero < 0) {
    console.log("N√∫mero negativo");
} else {
    console.log("N√∫mero es cero");
}

//‚úîÔ∏èTRY CATCH
function dividirNumeros(a, b) {
    try {
        if (b === 0) {
            throw new Error("¬°Divisi√≥n por cero no permitida!");
        }

        let resultado = a / b;
        console.log(`Resultado de la divisi√≥n: ${resultado}`);
    } catch (error) {
        console.error(`Error: ${error.message}`);
    }
}

dividirNumeros(10, 2);  // 5
dividirNumeros(8, 0);   // Error: ¬°Divisi√≥n por cero no permitida!
dividirNumeros(12, 3);  // 4

/*üßë‚ÄçüíªDIFICULTAD EXTRA:
 Crea un programa que imprima por consola todos los n√∫meros comprendidos
 entre 10 y 55 (incluidos), pares, y que no son ni el 16 ni m√∫ltiplos de 3.
*/

for (let number = 10; number <= 55; number += 2) {
    if (number == 16){
        continue;
    } else if (number % 3 == 0) {
        continue;
    } else {
        console.log(number);
    }
}